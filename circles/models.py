from django.db import models
from django.contrib.auth.models import User
from users.models import Profile 


#Mangaers
from circles.managers import InvitationManager
# Create your models here.
class Circle(models.Model):
    name = models.CharField('circle name',max_length=140)
    slug_name= models.SlugField(unique=True,max_length=40)

    about= models.CharField('circle description',max_length=255)

    """ Podriamos crear otro modelo aparte y lo referencias pero django tiene algo para hacer esto
        Extra field en many-to-many realtion ship Guardamos datos adicionales a traves de otro modelo """
    members= models.ManyToManyField(
        User, 
        through='MemberShip',
     
        through_fields=('circle','user')

    )

    rides_offered = models.PositiveIntegerField(default=0)
    rides_taken = models.PositiveIntegerField(default=0)

	
    verified = models.BooleanField(
        'verified circle',
        default=False,
        help_text='Public circles are listed in the main'
    )

	
    is_public = models.BooleanField(
        'public',
        default=True,
        help_text='Public circles are listed in the main'
    )
    
    is_limited= models.BooleanField(
        'limited',
        default=False,
        help_text='Limited circles can grow up to a fixed number of memebers'
    )

    members_limit= models.PositiveIntegerField(
        default=0,
        help_text='If circle is limited, this will be limit on the number of memebers'
    )
    def __str__(self):
	    """return Circle name """
	  
	    return self.name

    class Meta:
        """ Meta data """
        ordering = ['-rides_taken','-rides_offered']



""" MemberShip model """

class MemberShip(models.Model):
    """ MEmbrship is the table that hold the relationship between a user and a circle"""

    user = models.ForeignKey(User,on_delete = models.CASCADE)
    profile = models.ForeignKey(Profile,on_delete=models.CASCADE) 
    circle = models.ForeignKey(Circle,on_delete=models.CASCADE)
  

    is_admin= models.BooleanField(
        'circle admin',
        default=False,
        help_text="Circle admins can update the circle's date and manage its memebers"
    )

    # invitation
    used_invitations = models.PositiveSmallIntegerField(default=0)
    remaining_invitations = models.PositiveSmallIntegerField(default=0)
    invited_by = models.ForeignKey(
        User,
        null=True,
        on_delete = models.SET_NULL,
        related_name='invited_by'
    )

    # Stats
    rides_taken= models.PositiveIntegerField(default=0)
    rides_offered = models.PositiveSmallIntegerField(default=0)

    # Status 
    is_active  = models.BooleanField(
        'active status',
        default=True,
        help_text=' Only active users are allowed to intercat un the circle'
    )

    def __str__(self):
        return '@{} at @{}'.format(self.user.username,
        self.circle.slug_name)




class Invitation(models.Model):
    """ Circle invitation 
    
    A circle invitation is a random tetxt htat acts as 
    a unique code that grants access to a specific circle.
    this codes area generated by users that are already
    members of the circle and have a 'remaning_invitations'
    value greater than 0.

    """

    code = models.CharField(max_length=50,unique=True)

    
    issued_by=models.ForeignKey(
        User,
        on_delete=models.CASCADE,
        help_text='Circle member that is providing the invitation',
        related_name='issued_by'
    )

   # usuario quien uso la invitaci√≥n
    issued_by=models.ForeignKey(
        User, 
        on_delete=models.CASCADE,
        help_text='Circle member that is providing the invitation',
        related_name='issued_by'
    )

    circle = models.ForeignKey('circles.Circle',on_delete=models.CASCADE)

    used = models.BooleanField(default=False)
    used_at = models.DateTimeField(blank=True,null=True)
    
    # Manager
    objects= InvitationManager()

    def __str__(self):
        """ Return code and circle """
        return '@{} at @{}'.format(self.circle.slug_name,self.code)


    

